// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: protob/ecdsa-signing.proto

package signing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a P2P message sent to each party during Round 1 of the ECDSA TSS signing protocol.
type SignRound1Message1 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	C               []byte                 `protobuf:"bytes,1,opt,name=c,proto3" json:"c,omitempty"`
	RangeProofAlice [][]byte               `protobuf:"bytes,2,rep,name=range_proof_alice,json=rangeProofAlice,proto3" json:"range_proof_alice,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SignRound1Message1) Reset() {
	*x = SignRound1Message1{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound1Message1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound1Message1) ProtoMessage() {}

func (x *SignRound1Message1) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound1Message1.ProtoReflect.Descriptor instead.
func (*SignRound1Message1) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{0}
}

func (x *SignRound1Message1) GetC() []byte {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *SignRound1Message1) GetRangeProofAlice() [][]byte {
	if x != nil {
		return x.RangeProofAlice
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 1 of the ECDSA TSS signing protocol.
type SignRound1Message2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    []byte                 `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound1Message2) Reset() {
	*x = SignRound1Message2{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound1Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound1Message2) ProtoMessage() {}

func (x *SignRound1Message2) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound1Message2.ProtoReflect.Descriptor instead.
func (*SignRound1Message2) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{1}
}

func (x *SignRound1Message2) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// Represents a P2P message sent to each party during Round 2 of the ECDSA TSS signing protocol.
type SignRound2Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	C1            []byte                 `protobuf:"bytes,1,opt,name=c1,proto3" json:"c1,omitempty"`
	C2            []byte                 `protobuf:"bytes,2,opt,name=c2,proto3" json:"c2,omitempty"`
	ProofBob      [][]byte               `protobuf:"bytes,3,rep,name=proof_bob,json=proofBob,proto3" json:"proof_bob,omitempty"`
	ProofBobWc    [][]byte               `protobuf:"bytes,4,rep,name=proof_bob_wc,json=proofBobWc,proto3" json:"proof_bob_wc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound2Message) Reset() {
	*x = SignRound2Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound2Message) ProtoMessage() {}

func (x *SignRound2Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound2Message.ProtoReflect.Descriptor instead.
func (*SignRound2Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{2}
}

func (x *SignRound2Message) GetC1() []byte {
	if x != nil {
		return x.C1
	}
	return nil
}

func (x *SignRound2Message) GetC2() []byte {
	if x != nil {
		return x.C2
	}
	return nil
}

func (x *SignRound2Message) GetProofBob() [][]byte {
	if x != nil {
		return x.ProofBob
	}
	return nil
}

func (x *SignRound2Message) GetProofBobWc() [][]byte {
	if x != nil {
		return x.ProofBobWc
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 3 of the ECDSA TSS signing protocol.
type SignRound3Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Theta         []byte                 `protobuf:"bytes,1,opt,name=theta,proto3" json:"theta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound3Message) Reset() {
	*x = SignRound3Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound3Message) ProtoMessage() {}

func (x *SignRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound3Message.ProtoReflect.Descriptor instead.
func (*SignRound3Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{3}
}

func (x *SignRound3Message) GetTheta() []byte {
	if x != nil {
		return x.Theta
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 4 of the ECDSA TSS signing protocol.
type SignRound4Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeCommitment  [][]byte               `protobuf:"bytes,1,rep,name=de_commitment,json=deCommitment,proto3" json:"de_commitment,omitempty"`
	ProofAlphaX   []byte                 `protobuf:"bytes,2,opt,name=proof_alpha_x,json=proofAlphaX,proto3" json:"proof_alpha_x,omitempty"`
	ProofAlphaY   []byte                 `protobuf:"bytes,3,opt,name=proof_alpha_y,json=proofAlphaY,proto3" json:"proof_alpha_y,omitempty"`
	ProofT        []byte                 `protobuf:"bytes,4,opt,name=proof_t,json=proofT,proto3" json:"proof_t,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound4Message) Reset() {
	*x = SignRound4Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound4Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound4Message) ProtoMessage() {}

func (x *SignRound4Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound4Message.ProtoReflect.Descriptor instead.
func (*SignRound4Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{4}
}

func (x *SignRound4Message) GetDeCommitment() [][]byte {
	if x != nil {
		return x.DeCommitment
	}
	return nil
}

func (x *SignRound4Message) GetProofAlphaX() []byte {
	if x != nil {
		return x.ProofAlphaX
	}
	return nil
}

func (x *SignRound4Message) GetProofAlphaY() []byte {
	if x != nil {
		return x.ProofAlphaY
	}
	return nil
}

func (x *SignRound4Message) GetProofT() []byte {
	if x != nil {
		return x.ProofT
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 5 of the ECDSA TSS signing protocol.
type SignRound5Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    []byte                 `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound5Message) Reset() {
	*x = SignRound5Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound5Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound5Message) ProtoMessage() {}

func (x *SignRound5Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound5Message.ProtoReflect.Descriptor instead.
func (*SignRound5Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{5}
}

func (x *SignRound5Message) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 6 of the ECDSA TSS signing protocol.
type SignRound6Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeCommitment  [][]byte               `protobuf:"bytes,1,rep,name=de_commitment,json=deCommitment,proto3" json:"de_commitment,omitempty"`
	ProofAlphaX   []byte                 `protobuf:"bytes,2,opt,name=proof_alpha_x,json=proofAlphaX,proto3" json:"proof_alpha_x,omitempty"`
	ProofAlphaY   []byte                 `protobuf:"bytes,3,opt,name=proof_alpha_y,json=proofAlphaY,proto3" json:"proof_alpha_y,omitempty"`
	ProofT        []byte                 `protobuf:"bytes,4,opt,name=proof_t,json=proofT,proto3" json:"proof_t,omitempty"`
	VProofAlphaX  []byte                 `protobuf:"bytes,5,opt,name=v_proof_alpha_x,json=vProofAlphaX,proto3" json:"v_proof_alpha_x,omitempty"`
	VProofAlphaY  []byte                 `protobuf:"bytes,6,opt,name=v_proof_alpha_y,json=vProofAlphaY,proto3" json:"v_proof_alpha_y,omitempty"`
	VProofT       []byte                 `protobuf:"bytes,7,opt,name=v_proof_t,json=vProofT,proto3" json:"v_proof_t,omitempty"`
	VProofU       []byte                 `protobuf:"bytes,8,opt,name=v_proof_u,json=vProofU,proto3" json:"v_proof_u,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound6Message) Reset() {
	*x = SignRound6Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound6Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound6Message) ProtoMessage() {}

func (x *SignRound6Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound6Message.ProtoReflect.Descriptor instead.
func (*SignRound6Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{6}
}

func (x *SignRound6Message) GetDeCommitment() [][]byte {
	if x != nil {
		return x.DeCommitment
	}
	return nil
}

func (x *SignRound6Message) GetProofAlphaX() []byte {
	if x != nil {
		return x.ProofAlphaX
	}
	return nil
}

func (x *SignRound6Message) GetProofAlphaY() []byte {
	if x != nil {
		return x.ProofAlphaY
	}
	return nil
}

func (x *SignRound6Message) GetProofT() []byte {
	if x != nil {
		return x.ProofT
	}
	return nil
}

func (x *SignRound6Message) GetVProofAlphaX() []byte {
	if x != nil {
		return x.VProofAlphaX
	}
	return nil
}

func (x *SignRound6Message) GetVProofAlphaY() []byte {
	if x != nil {
		return x.VProofAlphaY
	}
	return nil
}

func (x *SignRound6Message) GetVProofT() []byte {
	if x != nil {
		return x.VProofT
	}
	return nil
}

func (x *SignRound6Message) GetVProofU() []byte {
	if x != nil {
		return x.VProofU
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 7 of the ECDSA TSS signing protocol.
type SignRound7Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    []byte                 `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound7Message) Reset() {
	*x = SignRound7Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound7Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound7Message) ProtoMessage() {}

func (x *SignRound7Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound7Message.ProtoReflect.Descriptor instead.
func (*SignRound7Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{7}
}

func (x *SignRound7Message) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 8 of the ECDSA TSS signing protocol.
type SignRound8Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeCommitment  [][]byte               `protobuf:"bytes,1,rep,name=de_commitment,json=deCommitment,proto3" json:"de_commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound8Message) Reset() {
	*x = SignRound8Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound8Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound8Message) ProtoMessage() {}

func (x *SignRound8Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound8Message.ProtoReflect.Descriptor instead.
func (*SignRound8Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{8}
}

func (x *SignRound8Message) GetDeCommitment() [][]byte {
	if x != nil {
		return x.DeCommitment
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 9 of the ECDSA TSS signing protocol.
type SignRound9Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	S             []byte                 `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignRound9Message) Reset() {
	*x = SignRound9Message{}
	mi := &file_protob_ecdsa_signing_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignRound9Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound9Message) ProtoMessage() {}

func (x *SignRound9Message) ProtoReflect() protoreflect.Message {
	mi := &file_protob_ecdsa_signing_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound9Message.ProtoReflect.Descriptor instead.
func (*SignRound9Message) Descriptor() ([]byte, []int) {
	return file_protob_ecdsa_signing_proto_rawDescGZIP(), []int{9}
}

func (x *SignRound9Message) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

var File_protob_ecdsa_signing_proto protoreflect.FileDescriptor

const file_protob_ecdsa_signing_proto_rawDesc = "" +
	"\n" +
	"\x1aprotob/ecdsa-signing.proto\x12\x1cbinance.tsslib.ecdsa.signing\"N\n" +
	"\x12SignRound1Message1\x12\f\n" +
	"\x01c\x18\x01 \x01(\fR\x01c\x12*\n" +
	"\x11range_proof_alice\x18\x02 \x03(\fR\x0frangeProofAlice\"4\n" +
	"\x12SignRound1Message2\x12\x1e\n" +
	"\n" +
	"commitment\x18\x01 \x01(\fR\n" +
	"commitment\"r\n" +
	"\x11SignRound2Message\x12\x0e\n" +
	"\x02c1\x18\x01 \x01(\fR\x02c1\x12\x0e\n" +
	"\x02c2\x18\x02 \x01(\fR\x02c2\x12\x1b\n" +
	"\tproof_bob\x18\x03 \x03(\fR\bproofBob\x12 \n" +
	"\fproof_bob_wc\x18\x04 \x03(\fR\n" +
	"proofBobWc\")\n" +
	"\x11SignRound3Message\x12\x14\n" +
	"\x05theta\x18\x01 \x01(\fR\x05theta\"\x99\x01\n" +
	"\x11SignRound4Message\x12#\n" +
	"\rde_commitment\x18\x01 \x03(\fR\fdeCommitment\x12\"\n" +
	"\rproof_alpha_x\x18\x02 \x01(\fR\vproofAlphaX\x12\"\n" +
	"\rproof_alpha_y\x18\x03 \x01(\fR\vproofAlphaY\x12\x17\n" +
	"\aproof_t\x18\x04 \x01(\fR\x06proofT\"3\n" +
	"\x11SignRound5Message\x12\x1e\n" +
	"\n" +
	"commitment\x18\x01 \x01(\fR\n" +
	"commitment\"\x9f\x02\n" +
	"\x11SignRound6Message\x12#\n" +
	"\rde_commitment\x18\x01 \x03(\fR\fdeCommitment\x12\"\n" +
	"\rproof_alpha_x\x18\x02 \x01(\fR\vproofAlphaX\x12\"\n" +
	"\rproof_alpha_y\x18\x03 \x01(\fR\vproofAlphaY\x12\x17\n" +
	"\aproof_t\x18\x04 \x01(\fR\x06proofT\x12%\n" +
	"\x0fv_proof_alpha_x\x18\x05 \x01(\fR\fvProofAlphaX\x12%\n" +
	"\x0fv_proof_alpha_y\x18\x06 \x01(\fR\fvProofAlphaY\x12\x1a\n" +
	"\tv_proof_t\x18\a \x01(\fR\avProofT\x12\x1a\n" +
	"\tv_proof_u\x18\b \x01(\fR\avProofU\"3\n" +
	"\x11SignRound7Message\x12\x1e\n" +
	"\n" +
	"commitment\x18\x01 \x01(\fR\n" +
	"commitment\"8\n" +
	"\x11SignRound8Message\x12#\n" +
	"\rde_commitment\x18\x01 \x03(\fR\fdeCommitment\"!\n" +
	"\x11SignRound9Message\x12\f\n" +
	"\x01s\x18\x01 \x01(\fR\x01sB\x0fZ\recdsa/signingb\x06proto3"

var (
	file_protob_ecdsa_signing_proto_rawDescOnce sync.Once
	file_protob_ecdsa_signing_proto_rawDescData []byte
)

func file_protob_ecdsa_signing_proto_rawDescGZIP() []byte {
	file_protob_ecdsa_signing_proto_rawDescOnce.Do(func() {
		file_protob_ecdsa_signing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protob_ecdsa_signing_proto_rawDesc), len(file_protob_ecdsa_signing_proto_rawDesc)))
	})
	return file_protob_ecdsa_signing_proto_rawDescData
}

var file_protob_ecdsa_signing_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protob_ecdsa_signing_proto_goTypes = []any{
	(*SignRound1Message1)(nil), // 0: binance.tsslib.ecdsa.signing.SignRound1Message1
	(*SignRound1Message2)(nil), // 1: binance.tsslib.ecdsa.signing.SignRound1Message2
	(*SignRound2Message)(nil),  // 2: binance.tsslib.ecdsa.signing.SignRound2Message
	(*SignRound3Message)(nil),  // 3: binance.tsslib.ecdsa.signing.SignRound3Message
	(*SignRound4Message)(nil),  // 4: binance.tsslib.ecdsa.signing.SignRound4Message
	(*SignRound5Message)(nil),  // 5: binance.tsslib.ecdsa.signing.SignRound5Message
	(*SignRound6Message)(nil),  // 6: binance.tsslib.ecdsa.signing.SignRound6Message
	(*SignRound7Message)(nil),  // 7: binance.tsslib.ecdsa.signing.SignRound7Message
	(*SignRound8Message)(nil),  // 8: binance.tsslib.ecdsa.signing.SignRound8Message
	(*SignRound9Message)(nil),  // 9: binance.tsslib.ecdsa.signing.SignRound9Message
}
var file_protob_ecdsa_signing_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protob_ecdsa_signing_proto_init() }
func file_protob_ecdsa_signing_proto_init() {
	if File_protob_ecdsa_signing_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protob_ecdsa_signing_proto_rawDesc), len(file_protob_ecdsa_signing_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protob_ecdsa_signing_proto_goTypes,
		DependencyIndexes: file_protob_ecdsa_signing_proto_depIdxs,
		MessageInfos:      file_protob_ecdsa_signing_proto_msgTypes,
	}.Build()
	File_protob_ecdsa_signing_proto = out.File
	file_protob_ecdsa_signing_proto_goTypes = nil
	file_protob_ecdsa_signing_proto_depIdxs = nil
}
